---
# tasks file for issue
- name: Create required directories in {{ letsencrypt_dir }}"
  ansible.builtin.file:
    path: "{{ letsencrypt_dir }}/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: "0711"
  loop:
    - account
    - certs
    - csrs
    - keys

- name: Check if account key exists.
  ansible.builtin.stat:
    path: "{{ letsencrypt_account_key }}"
  register: account_key

- name: "Generate Let's Encrypt account key."
  ansible.builtin.copy:
    dest: "{{ letsencrypt_account_key }}"
    content: "{{ lookup('ansible.builtin.pipe', 'openssl genrsa 4096') }}"
    owner: root
    group: root
    mode: "0600"
  when: not account_key.stat.exists

- name: "Generate Let's Encrypt private key."
  ansible.builtin.copy:
    dest: "{{ letsencrypt_keys_dir }}/{{ domain_name }}.key"
    content: "{{ lookup('ansible.builtin.pipe', 'openssl genrsa 4096') }}"
    owner: root
    group: root
    mode: "0600"

- name: "Generate Let's Encrypt CSR"
  block:
    - name: Generate CSR output.
      ansible.builtin.shell:
        cmd: >
          openssl req -new -sha256
          -key {{ letsencrypt_keys_dir }}/{{ domain_name }}.key
          -subj "/CN={{ domain_name }}"
          -reqexts SAN
          -config <(cat /etc/ssl/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}"))
      args:
        executable: /bin/bash
      changed_when: true
      register: csr

    - name: Write CSR output to file.
      ansible.builtin.copy:
        dest: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        content: "{{ csr.stdout }}"
        mode: "0600"
        owner: root
        group: root

- name: "Begin Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    terms_agreed: 1
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
    remaining_days: 91
  register: acme_challenge_domain

- name: Debug
  ansible.builtin.debug:
    var: acme_challenge_domain

- name: "Create directory for .well-known/acme-challenge"
  ansible.builtin.file:
    path: "{{ acme_challenge_dir }}/.well-known/acme-challenge"
    state: directory
    owner: root
    group: root
    mode: "0755"
    setype: httpd_sys_content_t

- name: "Implement http-01 challenge files"
  ansible.builtin.copy:
    content: "{{ acme_challenge_domain['challenge_data'][item]['http-01']['resource_value'] }}"
    dest: "{{ acme_challenge_dir }}/{{ acme_challenge_domain['challenge_data'][item]['http-01']['resource'] }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - "{{ domain_name }}"
    - "www.{{ domain_name }}"

- name: Copy nginx.conf.
  ansible.builtin.template:
    src: templates/nginx.conf.j2
    dest: /etc/nginx/conf.d/{{ domain_name }}.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart nginx.

- name: Flush handlers.
  ansible.builtin.meta: flush_handlers

- name: "Complete Let's Encrypt challenges"
  community.crypto.acme_certificate:
    acme_directory: "{{ acme_directory }}"
    acme_version: "{{ acme_version }}"
    account_key_src: "{{ letsencrypt_account_key }}"
    account_email: "{{ acme_email }}"
    challenge: "{{ acme_challenge_type }}"
    csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
    dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
    chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
    fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
    data: "{{ acme_challenge_domain }}"
